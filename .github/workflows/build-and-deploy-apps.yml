name: Deploy apps

permissions:
  contents: write
  pull-requests: write
  id-token: write

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        options:
          - dev
          - stage
          - prod
        description: "Environment to apply changes to"
        default: "prod"

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}


jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.define-envs.outputs.environment }}
      is-dev: ${{ steps.define-envs.outputs.is-dev }}
      is-release: ${{ steps.define-envs.outputs.is-release }}
      cloudfront-origin-name: ${{ steps.define-envs.outputs.cloudfront-origin-name }}
      s3-bucket-name: ${{ steps.define-envs.outputs.s3-bucket-name }}

    steps:
      - name: Base env info
        run: |
          echo BRANCH_SLUG="$(echo '${{ env.BRANCH_NAME }}' | sed 's/[^a-zA-Z0-9]/-/g')" >> $GITHUB_ENV
          echo ENVIRONMENT=${{ inputs.environment || 'prod' }} >> $GITHUB_ENV

      - name: Define envs information
        id: define-envs
        run: |
          echo environment=${{ env.ENVIRONMENT }} >> $GITHUB_OUTPUT
          echo is-dev=${{ env.ENVIRONMENT == 'dev' && 'true' || '' }} >> $GITHUB_OUTPUT
          echo is-release=${{ startsWith(env.BRANCH_NAME, 'release/') && 'true' || '' }} >> $GITHUB_OUTPUT
          echo cloudfront-origin-name=${{ env.CLOUDFRONT_ORIGIN_NAME }} >> $GITHUB_OUTPUT

  build-apps:
    needs: [ prepare ]
    runs-on: ubuntu-latest
    outputs:
      affected-projects: ${{ steps.get-affected-projects.outputs.affected-projects }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}
          fetch-depth: 0

      - name: Verify if last release tag exists, and define nx command to use
        id: nx
        run: |
          if [ $(git tag -l ${{ needs.prepare.outputs.release-tag }}) ]; then
           echo "Last release tag exists, will process with affected applications"
           echo exec-cmd="npx nx affected --base=${{ needs.prepare.outputs.release-tag }}" >> $GITHUB_OUTPUT
           echo show-apps="npx nx show projects --json --type app --affected --base ${{ needs.prepare.outputs.release-tag }}" >> $GITHUB_OUTPUT
          else
           echo "No last release tag exists, all apps will be deployed"
           echo exec-cmd="npx nx run-many" >> $GITHUB_OUTPUT
           echo show-apps="npx nx show projects --json --type app" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Install environment
        run: yarn install

      - name: Build apps
        run: ${{ steps.nx.outputs.exec-cmd }} -t build-docs

#      readme needed because of limitation of upload artifact action
#      https://github.com/actions/upload-artifact/issues/174
      - name: Upload builds
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: apps/*/build
          if-no-files-found: error

      - name: Get affected projects
        id: get-affected-projects
        run: echo affected-projects=$(${{ steps.nx.outputs.show-apps }} --with-target build-docs) >> $GITHUB_OUTPUT

  apply-tf-app-changes:
    needs: [ prepare, build-apps ]
    strategy:
      matrix:
        project: ${{ fromJson(needs.build-apps.outputs.affected-projects) }}
    uses: softkitit/github-actions-terraform/.github/workflows/cd-apply-terraform-changes.yml@main
    with:
      environment: ${{ needs.prepare.outputs.environment }}
      terraform-folder: apps/${{ matrix.project }}/terraform
    secrets: inherit

  deploy-app:
    needs: [ prepare, apply-tf-app-changes, build-apps ]
    strategy:
      matrix:
        project: ${{ fromJson(needs.build-apps.outputs.affected-projects) }}

    uses: softkitit/github-actions-terraform/.github/workflows/cd-deploy-to-s3.yml@main
    with:
      environment: ${{ needs.prepare.outputs.environment }}
      s3-bucket-name: ${{ github.event.repository.name }}-${{ needs.prepare.outputs.environment }}-${{ matrix.project }}-origin
      cloudfront-origin-name: ${{ github.event.repository.name }}-${{ needs.prepare.outputs.environment }}-${{ matrix.project }}
      website-content: build
      folder-to-upload: ${{ matrix.project }}/build
    secrets: inherit





