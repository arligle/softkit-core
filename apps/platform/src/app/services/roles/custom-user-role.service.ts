import { Injectable } from '@nestjs/common';
import { Transactional } from 'typeorm-transactional';
import { CustomUserRole } from '../../database/entities';
import { RoleType } from '../../database/entities/role/types/default-role.enum';
import { CustomUserRoleRepository } from '../../repositories';
import { DefaultRoleService } from './default-role.service';
import { BaseTenantEntityService } from "@saas-buildkit/typeorm-service";

@Injectable()
export class CustomUserRoleService extends BaseTenantEntityService<
  CustomUserRole,
  CustomUserRoleRepository
> {
  constructor(
    private defaultRoleService: DefaultRoleService,
    repository: CustomUserRoleRepository,
  ) {
    super(repository);
  }

  @Transactional()
  async setUpDefaultRolesForTenant(tenantId: string) {
    const allDefaultRoles =
      await this.defaultRoleService.findAllWithPermissions();

    return await this.repository.save(
      allDefaultRoles.map((item) => {
        // exclude id, createdAt, updatedAt from the object to save in the database
        // as they are auto generated by the database, and we don't want to override them
        // with the values from the default role entity object
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { id: _, createdAt: __, updatedAt: ___, ...toSave } = item;

        return {
          ...toSave,
          tenantId,
        };
      }),
    );
  }

  @Transactional()
  async findDefaultRole(tenantId: string) {
    return await this.repository.findOne({
      where: {
        roleType: RoleType.REGULAR_USER,
        tenantId,
      },
    });
  }
}
