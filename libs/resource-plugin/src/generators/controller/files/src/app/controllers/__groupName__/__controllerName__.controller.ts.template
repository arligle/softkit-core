import {
  Body,
  Controller,
  Delete,
  Get,
  HttpCode,
  HttpStatus,
  Param,
  Post,
  Put,
  Query,
} from '@nestjs/common';
import { IdParamUUID, VersionNumberParam } from '@softkit/common-types';
import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';
import { Permissions } from '@softkit/auth';
import {
  <%= pascalCase(serviceName) -%>Service,
} from '../../services';

import {
  <%= pascalCase(entityName) -%>DTO,
  Create<%= pascalCase(entityName) -%>Request,
  Update<%= pascalCase(entityName) -%>Request,
  <%= constantCase(entityName) -%>_PAGINATION_CONFIG
} from './vo/<%= controllerName -%>.dto';

import {
  Paginate,
  Paginated,
  PaginatedSwaggerDocs,
  PaginateQuery,
} from 'nestjs-paginate';
import { map } from '@softkit/validation';

@ApiTags('<%= capitalCase(controllerName) -%>')
@Controller({
  path: '<%= paramCase(controllerName) -%>',
  version: '1',
})
@ApiBearerAuth()
export class <%= pascalCase(controllerName) -%>Controller {
  constructor(
    private readonly service: <%= pascalCase(serviceName) -%>Service,
  ) {}

  @Get()
  @PaginatedSwaggerDocs(
    <%= pascalCase(entityName) -%>DTO,
    <%= constantCase(entityName) -%>_PAGINATION_CONFIG,
  )
  @Permissions('<%= projectName -%>.<%= controllerName -%>.read')
  async findAll(
    @Paginate()
    query: PaginateQuery,
  ): Promise<Paginated<<%= pascalCase(entityName) -%>DTO>> {
    return this.service.findAllPaginatedAndTransform(
      query,
      <%= constantCase(entityName) -%>_PAGINATION_CONFIG,
      <%= pascalCase(entityName) -%>DTO,
    );
  }

  @Get(':id')
  @Permissions('<%= projectName -%>.<%= controllerName -%>.read')
  async findOne(
    @Param() param: IdParamUUID,
  ): Promise<<%= pascalCase(entityName) -%>DTO> {
    return this.service.findOneById(param.id).then((data) => {
      return map(data, <%= pascalCase(entityName) -%>DTO);
    });
  }

  @Post()
  @Permissions('<%= projectName -%>.<%= controllerName -%>.create')
  async create(@Body() dto: Create<%= pascalCase(entityName) -%>Request): Promise<<%= pascalCase(entityName) -%>DTO> {
    return this.service
      .createOrUpdateEntity(dto)
      .then((item) => {
        return map(item, <%= pascalCase(entityName) -%>DTO);
      });
  }

  @Put(':id')
  @Permissions('<%= projectName -%>.<%= controllerName -%>.update')
  async updateOne(
    @Param() param: IdParamUUID, 
<% if (entityIncludesVersionField) { %>
    @Query() query: VersionNumberParam,
<% } %>
    @Body() dto: Update<%= pascalCase(entityName) -%>Request
    ): Promise<<%= pascalCase(entityName) -%>DTO> {
    return this.service
      .createOrUpdateEntity({
        id: param.id,
<% if (entityIncludesVersionField) { %>
        version: query.version,
<% } %>
        ...dto,
      })
      .then((item) => {
        return this.service.findOneById(item.id);
      })
      .then((item) => {
        return map(item, <%= pascalCase(entityName) -%>DTO);
      });
  }

  @Delete(':id')
  @HttpCode(HttpStatus.NO_CONTENT)
  @Permissions('<%= projectName -%>.<%= controllerName -%>.delete')
  async softDelete(@Param() param: IdParamUUID, @Query() query: VersionNumberParam) {
    return this.service.archive(param.id, query.version);
  }
}
